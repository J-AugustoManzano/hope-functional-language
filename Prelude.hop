! ---------------------------------------------------------------------------- !
!                                                                              !
! Módulo Hope .........: Prelude.hop                                           !
!                                                                              !
! Simulação Haskell ...: Prelude/Data.List/List                                !
! Versão ..............: 2.0.2                                                 !
! Objetivo ............: Simulação base Haskell em Hope                        !
! Copyright ...........: (c) Augusto Manzano, 2022                             !
! Licença .............: Creative Commons CC CC BY-NC-SA 4.0 (https://creative !
!                        commons.org/licenses/by-nc-sa/4.0/legalcode.pt)       !
!                                                                              !
!                        Implementação em Hope das principais funcionalidades  !
!                        encontradas na linguagem Haskell. Apoio operacional a !
!                        partir de algumas operações existentes nos módulos    !
!                        padrão "Prelude", "Data.List" e "List".               !
!                                                                              !
!                        Algumas funções do Prelude/List não estão incluídas   !
!                        neste arquivo. Há funções exstentes neste arquivo que !
!                        não são partes dos pacotes Haskell.                   !
!                                                                              !
!                        Algumas funções existentes no Prelude já fazem parte  !
!                        da biblioteca "Standard.hop" sendo comuns a uma lin-  !
!                        guagem funcional. Há alguns ajustes feitos no arquivo !
!                        "Standard.hop" aqui disponibilizado que deve substi-  !
!                        tuir o arquivo original.                              !
!                                                                              !
!                        Este projeto de funcionalidades foi escrito da manei- !
!                        ra mais simplista possível utilizando-se alguns dos   !
!                        principais recursos básicos da linguagem Hope.        !
!                                                                              !
! Estabilidade ........: Experimental (em desenvolvimento)                     !
! Dependência .........: Standard.hop (modificada para suporte)                !
!                        Incluído neste pacote.                                !
!                                                                              !
! ---------------------------------------------------------------------------- !   

! !!! -------------------------------------------------------------------- !!! !
! !!! SIMULAÇÃO "PRELUDE", "DATA.LIST" e "LIST" COM AJUSTES                !!! !
! !!! -------------------------------------------------------------------- !!! !



! !!! Operadores auxiliares
! !!! =====================

infixr \\ : 3;
dec \\ : list alpha # list beta -> list (alpha # beta);



! !!! Funcionalidades auxiliares/extras - nao Haskell
! !!! ===============================================

after : num # list alpha -> list alpha;
after (0, xs) <= xs;
after (n, []) <= [];
after (succ n, x :: xs) <= after (n, xs);

afterWith : (alpha -> truval) -> list alpha -> list alpha;
afterWith cond [] <= [];
afterWith cond (x :: xs) <= if cond x 
                            then afterWith cond xs 
                            else x :: xs;

comp : list alpha # (alpha -> truval) -> list alpha;
comp ([], f) <= [];
comp (x :: xs, f) <= if f x 
                     then x :: comp (xs, f)
                     else comp (xs, f);
                     
dist : alpha # list beta -> list (alpha # beta);
dist (x, []) <= [];
dist (x, y :: ys) <= (x, y) :: dist (x, ys);

front : num # list alpha -> list alpha;
front (0, xs) <= [];
front (n, []) <= [];
front (succ n, x :: xs) <= x :: front(n, xs);

front_with : (alpha -> truval) -> list alpha -> list alpha;
front_with cond [] <= [];
front_with cond (x :: xs) <= if cond x 
                             then x :: front_with cond xs 
                             else [];

listPow : num # list num -> list num;
listPow (_, [])      <= [];
listPow (n, x :: xs) <= pow (x, n) :: listPow (n, xs);

many : alpha -> list alpha;
many x <= xs whererec xs == x :: xs;

rangeLst : num # num # num -> list num;
rangeLst (i, f, p) <= if i > f 
                      then [] 
                      else i :: rangeLst (i + p, f, p);
                      
scan : beta # (beta # alpha -> beta) -> list alpha -> list beta;
scan (c, f) <= (c ::) o (\ [] => [] | x :: xs => scan (f (c, x), f) xs);

span : (alpha -> truval) # list alpha -> list alpha # list alpha;
span (f, []) <= ([], []);
span (f, x :: xs) <= if f x
                     then (x :: f, a) where (f, a) == span (f, xs)
                     else ([], x :: xs);


! !!! Funcionalidades Prelude: Haskell
! !!! ================================

all : (alpha -> truval) # list alpha -> truval;
all (_, [])      <= true;
all (p, x :: xs) <= p x and all (p, xs);

any : (alpha -> truval) # list alpha -> truval;
any (_, [])      <= false;
any (p, x :: xs) <= p x or any (p, xs); 

break : (alpha -> truval) # list alpha -> (list alpha # list alpha);
break (f, []) <= ([], []);
break (f, x :: xs) <= if f x
                      then ([], x :: xs)
                      else let (ys, zs) == break (f, xs) in (x :: ys, zs);


compare : alpha # alpha -> relation;
compare (x, y) <= if x = y
                  then EQUAL
                  else if x =< y
                       then LESS
                       else GREATER;

concat : list (list alpha) -> list alpha;
concat []        <= [];
concat (x :: xs) <= x <> concat xs;

concatMap : (alpha -> list beta) # list alpha -> list beta;
concatMap (f, []) <= [];
concatMap (f, x :: xs) <= f x <> concatMap (f, xs);
!! >: concatMap(\x => [x+2], [1,3,5]);
!! >> [3, 5, 7] : list num

curry : (alpha # beta -> gamma) -> alpha -> beta -> gamma;
curry f <= \ x => \ y => f(x, y);
!! >: curry fst 2 3;
!! >> 2 : num

cycle : list num -> list num;
cycle [] <= error ("Lista vazia!");
cycle (x :: xs) <= x :: cycle (xs <> [x]);

deleteBy : (alpha # alpha -> truval) # alpha # list alpha -> list alpha;
deleteBy (_, _, []) <= [];
deleteBy (f, x, y :: ys) <= if f (x, y) 
                            then ys 
                            else y :: deleteBy (f, x, ys);
                            
delete : alpha # list alpha -> list alpha;
delete (n, xs) <= deleteBy ((=), n, xs);                            
                            
drop : num # list alpha -> list alpha;
drop (0, xs)      <= xs;
drop (n, [])      <= [];
drop (n, x :: xs) <= drop (n - 1, xs);

dropWhile : (alpha -> truval) # list alpha -> list alpha;
dropWhile (_, [])      <= [];
dropWhile (p, x :: xs) <= if p x 
                          then dropWhile (p, xs) 
                          else x :: xs;

elem : alpha # list alpha -> truval;
elem (x, [])      <= false;
elem (x, y :: ys) <= x = y or elem (x, ys);

equalityAux : list alpha # list alpha -> truval;
equalityAux ([], []) <= true;
equalityAux ([], b) <= true;
equalityAux (a, []) <= false;
equalityAux (a :: ax, b) <= if elem (a, b)
                            then equalityAux (ax, b)
                            else false;

equality : list alpha # list alpha -> truval;
equality (a, b) <= equalityAux (a, b) and equalityAux (b, a);

filter : (alpha -> truval) # list alpha -> list alpha;
filter (_, [])      <= [];
filter (p, x :: xs) <= if p x 
                       then x :: filter (p, xs) 
                       else filter (p, xs);

foldl : (alpha # beta -> alpha) # alpha # list beta -> alpha;
foldl (f, n, [])      <= n;
foldl (f, n, x :: xs) <= foldl (f, f (n, x), xs);

foldr : (alpha # beta -> beta) # beta # list alpha -> beta;
foldr (f, n, [])      <= n;
foldr (f, n, x :: xs) <= f (x, foldr (f, n, xs));
!! >: foldr ((\ (c, acc) => acc <> [c]), "foo", ['a', 'b', 'c', 'd']);
!! >> "foodcba" : list char

concat2lst : list alpha # list alpha -> list alpha;
concat2lst (xs, ys) <= foldr ((::), ys, xs);

foldl1 : (alpha # alpha -> alpha) # list alpha -> alpha;
foldl1 (f, x :: xs) <= foldl (f, x, xs);

foldr1 : (alpha # alpha -> alpha) # list alpha -> alpha;
foldr1 (f, [x]) <= x;
foldr1 (f, x :: xs) <= f (x, foldr1 (f, xs));

head : list alpha -> alpha;
head []       <= error ("Empty list!");
head (x :: _) <= x;

index : num # list num -> num;
index (_, []) <= error "Index out of range!";
index (0, x :: xs) <= x;
index (n, x :: xs) <= index (n - 1, xs);

init : list alpha -> list alpha;
init ([x])     <= [];
init (x :: xs) <= x :: init xs;

insert : alpha # list alpha -> list alpha;
insert (n, [])      <= [n];
insert (n, x :: xs) <= if n =< x 
                       then n :: x :: xs 
                       else x :: insert (n, xs);

intersect : list alpha # list alpha -> list alpha;
intersect ([], _) <= [];
intersect (x :: xs, lst) <= if elem (x, lst)
                            then x :: intersect (xs, lst)
                            else intersect (xs, lst);

iterate : (alpha -> alpha) # alpha -> list alpha;
iterate (f, x) <= x :: iterate (f, f x);
!! >: take (10, (iterate (\x => x * 2, 1)));
!! >> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512] : list num
                            
intersperse : alpha # list alpha -> list alpha;
intersperse  (_, []) <= [];
intersperse  (_, [x]) <= [x];
intersperse (n, x :: xs) <= x :: n :: intersperse (n, xs);
!! >: intersperse (0, [1, 2, 3, 4, 5]);
!! >> [1, 0, 2, 0, 3, 0, 4, 0, 5] : list num

dec intercalate : list alpha # list (list alpha) -> list alpha;
--- intercalate (xs, xss) <= concat (intersperse (xs, xss));

last : list alpha -> alpha;
last ([x])     <= x;
last (x :: xs) <= last xs;

length : list alpha -> num;
length []        <= 0;
length (x :: xs) <= 1 + length xs;

getPos : alpha # list alpha -> num;
getPos (_, [])      <= error ("Element does not exist in the list!");
getPos (n, x :: xs) <= if n = x 
                       then length xs 
                       else getPos (n, xs);
                       
lines : list char -> list (list char);
lines [] <= [];
lines (x :: xs) <= if x = '\n' 
                   then [] :: lines xs 
                   else (\ [] => [[x]] | y :: ys => (x :: y) :: ys) (lines xs);
                       
lookup : alpha # list (alpha # beta) -> beta;
lookup (_, []) <= error "Data not found!";
lookup (k, ((x, y) :: xyz)) <= if k = x
                               then y
                               else lookup (k, xyz);
!! >: lookup ('c', [('a', 0), ('b', 1), ('c', 2)]);
!! >> 2 : num                               

map : (alpha -> beta) # list alpha -> list beta;
map (_, [])      <= [];
map (f, x :: xs) <= f x :: map (f, xs);

inits : list alpha -> list(list alpha);
inits <= ([] ::) o (\ [] => [] | x :: xs => map ((x ::), inits xs));

maximum : list alpha -> alpha;
maximum []             <= error ("Empty list!");
maximum ([x])          <= x;
maximum (x :: y :: xs) <= if x > y 
                          then maximum (x :: xs) 
                          else maximum (y :: xs);

member : alpha # list alpha -> truval;
member <= elem;    

merge : list alpha # list alpha -> list alpha;
merge ([], []) <= [];
merge (a, []) <= a;
merge ([], b) <= b;
merge (a :: ax, b) <= a :: merge (ax, b);

minimum : list alpha -> alpha;
minimum []             <= error ("Empty list!");
minimum ([x])          <= x;
minimum (x :: y :: xs) <= if x < y 
                          then minimum (x :: xs) 
                          else minimum (y :: xs);

nubBy : (alpha # alpha -> truval) # list alpha -> list alpha;
nubBy (f, []) <= [];
nubBy (f, x :: xs) <= x :: nubBy (f, filter (lambda y => not (f (x, y)), xs));
!! >: nubBy ((\(x, y) => x mod 3 = y mod 3), [1,2,4,5,6]);
!! >> [1, 2, 6] : list num

nub : list alpha -> list alpha;
nub [] <= [];
nub (x :: xs) <= x :: filter ((/= x), nub xs);

notElem : alpha # list alpha -> truval;
notElem (_, []) <= true;
notElem (x, y :: ys) <= x /= y and notElem (x, ys);

null : list alpha -> truval;
null []       <= true;
null (_ :: _) <= false;

print : alpha -> alpha;
print n <= n;
!! >: print "alo";
!! >> "alo" : list char
!! >: print [1,2,3]<>[4,5];
!! >> [1, 2, 3, 4, 5] : list num

partition : (alpha -> truval) # list alpha -> list alpha # list alpha;
partition (f, []) <= ([], []);
partition (f, x :: xs) <= if f x 
                             then (x :: ayes, nayes) 
                             else (ayes, x :: nayes)
	                         where (ayes, nayes) == partition (f, xs);
	                         
product : list num -> num;
product xs <= foldl ((*), 1, xs);

random : num -> num;
random s <= pow (s * 15485863, 3) mod 2038074743 / 2038074743;

randoms : num -> list num;
randoms n <= random n :: randoms (n + 1);

reduce : list alpha # (alpha # alpha -> alpha) # alpha -> alpha;
reduce ([], f, n)      <= n;
reduce (x :: xs, f, n) <= f (x, reduce (xs, f, n));

remove : alpha # list alpha -> list alpha;
remove (x, ys) <= filter ((/= x), ys);

repeat : alpha -> list alpha;
repeat x <= x :: repeat x;

reverseAux : list alpha # list alpha -> list alpha;
reverseAux ([], ys)    <= ys;
reverseAux (x :: xs, ys) <= reverseAux (xs, x::ys);

reverse : list alpha -> list alpha;
reverse xs <= reverseAux (xs, []);

rotl : list alpha -> list alpha;
rotl [] <= [];
rotl (x::xs) <= xs <> [x];

rotr : list alpha -> list alpha;
rotr [] <= [];
rotr xs <= last xs :: init xs;

subtract : num # num -> num;
subtract (x, y) <= y - x;

sum : list num -> num;
sum []        <= 0;
sum (x :: xs) <= x + sum xs;  

scanl : (beta # alpha -> beta) # beta # list alpha -> list beta;
scanl (_, n, []) <= [n];
scanl (f, n, x :: xs) <= n :: scanl (f, f (n, x), xs);

scanl1 : (alpha # alpha -> alpha) # list alpha -> list alpha;
scanl1 (_, []) <= [];
scanl1 (f, x :: xs) <= scanl (f, x, xs);

scanr : (alpha # beta -> beta) # beta # list alpha -> list beta;
scanr (_, n, []) <= [n];
scanr (f, n, x :: xs) <= f (x, head ys) :: ys 
                         where ys == scanr (f, n, xs);

scanr1 : (alpha # alpha -> alpha) # list alpha -> list alpha;
scanr1 (_, []) <= [];
scanr1 (_, [x]) <= [x];
scanr1 (f, x :: xs) <= f (x, head ys) :: ys where ys == scanr1 (f, xs);

sortAux : list alpha # list alpha -> list alpha;
sortAux ([], ys) <= ys;
sortAux (x :: xs, ys) <=
	sortAux (smaller, x :: sortAux (larger, ys))
	where (smaller, larger) == partition ((< x), xs);

sort : list alpha -> list alpha;
sort xs <= sortAux (xs, []);

take : num # list alpha -> list alpha;
take (n, [])      <= [];
take (0, xs)      <= [];
take (n, x :: xs) <= x :: take (n - 1, xs);

tail : list alpha -> list alpha;
tail []        <= error ("Empty list!");
tail (_ :: xs) <= xs;

tails : list alpha -> list (list alpha);
  proper_tails : list alpha -> list (list alpha);
  proper_tails [] <= [];
  proper_tails (x :: xs) <= tails xs;
tails l <= l :: proper_tails l;

takeWhile : (alpha -> truval) # list alpha -> list alpha;
takeWhile (_, [])      <= [];
takeWhile (p, x :: xs) <= if p x 
                          then x :: takeWhile (p, xs) 
                          else [];

transpose : list (list alpha) -> list (list alpha);
transpose [[]] <= [];
transpose ([]::_) <= [];
transpose x <= (map (head, x)) :: transpose (map (tail, x));

uncurry : (alpha -> beta -> gamma) -> alpha # beta -> gamma;
uncurry f (x, y) <= f x y;

union : list alpha # list alpha -> list alpha;
union (a, b) <= sort (nub (merge (a, b)));

unlines : list (list char) -> list char;
unlines [] <= [];
unlines (x :: xs) <= x <> '\n' :: unlines xs;

until : (alpha -> truval) # (alpha -> alpha) # alpha -> alpha;
until (p, f, x) <= if p x 
                   then x 
                   else until (p, f, f x);

unwordsAux : list (list char) -> list char;
unwordsAux [] <= [];
unwordsAux (x :: xs) <= x <> " " <> unwordsAux xs;

unwords : list (list char) -> list char;
unwords lst <= init (unwordsAux lst);

unzipAux : list alpha # list alpha # list (alpha # alpha) -> list alpha # list alpha;
unzipAux (xs, ys, []) <= (reverse xs, reverse ys);
unzipAux (xs, ys, (x, y) :: zs) <= unzipAux (x :: xs, y :: ys, zs);

unzip : list (alpha # alpha) -> list alpha # list alpha;
unzip [] <= ([], []);
unzip xs <= unzipAux ([], [], xs);

unzipAux3 : list alpha # list alpha # list alpha # list (alpha # alpha # alpha) -> list alpha # list alpha # list alpha;
unzipAux3 (xs, ys, zs, []) <= (reverse xs, reverse ys, reverse zs);
unzipAux3 (xs, ys, zs, (x, y, z) :: as) <= unzipAux3 (x :: xs, y :: ys, z :: zs, as);

unzip3 : list (alpha # alpha # alpha) -> list alpha # list alpha # list alpha;
unzip3 [] <= ([], [], []);
unzip3 xs <= unzipAux3 ([], [], [], xs);

!!!!! unzip4

!!!!! unzip5

!!!!! unzip6

!!!!! unzip7

words : list char -> list (list char);
  wordsAux : list char -> list(list char);
  wordsAux "" <= [];
  wordsAux cs <= w :: words rest where (w, rest) == span (not o isSpace, cs);
words cs <= wordsAux (afterWith isSpace cs);

zip : list alpha # list beta -> list (alpha # beta);
zip ([], _)            <= [];
zip (_, [])            <= [];
zip (x :: xs, y :: ys) <= (x, y) :: zip (xs, ys);

zip3 : (list alpha # list beta # list gamma) -> list (alpha # beta # gamma);
zip3 (_, _, _) <= [];
zip3 (a :: as, b :: bs, c :: cs) <= (a, b, c) :: zip3 (as, bs, cs);

zip4 : list alpha # list beta # list gamma # list delta -> list (alpha # beta # gamma # delta);
zip4 (_, _, _, _) <= [];
zip4 (a :: as, b :: bs, c :: cs, d :: ds) <= (a, b, c, d) :: zip4 (as, bs, cs, ds);

!!!!! zip5

!!!!! zip6

!!!!! zip7

zipWith : (alpha # beta -> gamma) # list alpha # list beta -> list gamma;
zipWith (_, _, _) <= [];
zipWith (f, x :: xs, y :: ys) <= f (x, y) :: zipWith (f, xs, ys);

zipWith3 : (alpha # beta # gamma -> delta) # list alpha # list beta # list gamma -> list delta;
zipWith3 (_, _, _) <= [];
zipWith3 (f, a :: ax, b :: bx, c :: cx) <= f (a, b, c) :: zipWith3 (f, ax, bx, cx);
!! :> zipWith3 ((\x, y, z => x+2*y+3*z), 1..5, 5..10, 10..15);
!! >> [41, 47, 53, 59, 65] : list num



! !!! Funcionalidades auxiliares/extras - Haskell e nao Haskell
! !!! dependendentes de funcoes da secao anterior.
! !!! =========================================================

diagonal : list alpha # list beta # list beta -> list (alpha # beta);
diagonal (xs, rev_ys, y :: ys) <= (xs || y :: rev_ys) <> diagonal (xs, y :: rev_ys, ys);
diagonal (xs, rev_ys, []) <= concat (map ((|| rev_ys), (tails (tail xs))));
xs \\ ys <= diagonal (xs, [], ys);

diference : list num # list num -> list num;
diference (a, []) <= a;
diference ([], b) <= [];
diference (a :: ax, b) <= if elem (a, b) 
                          then diference (ax, b) 
                          else a :: diference (ax, b);
                          
find : alpha # list alpha -> num;
find (_, [])      <= error ("Empty list!");
find (n, x :: xs) <= getPos (n, reverse (x :: xs));

group : list alpha -> list (list alpha);
group {} <= [];
group (x :: xs) <= (x :: takeWhile ((= x), xs)) :: group (dropWhile ((= x), xs));

replicate : num # alpha -> list alpha;
replicate (n, x) <= take (n, repeat x);

splitAt : num # list alpha -> list alpha # list alpha;
splitAt (n, xs) <= (take (n, xs), drop (n, xs));

splitAt' : num # list alpha -> list alpha # list alpha;
splitAt' (0, ys)      <= ([], ys);
splitAt' (_, [])      <= ([], []);
splitAt' (n, y :: ys) <= if n < 0 
                         then ([], y :: ys) 
                         else (y :: a, b) 
                         where (a, b) == splitAt' (n - 1, ys);  

unique : list alpha -> list alpha;
unique []        <= [];
unique (x :: xs) <= if member (x, xs) 
                    then unique xs 
                    else x :: unique xs;
